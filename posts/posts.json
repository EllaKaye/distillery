[
  {
    "path": "posts/making-a-darkmode-for-your-distill-site/",
    "title": "Making a Darkmode for your distill site",
    "description": "We build a darkmode for our distill site using css and a bit of java script.",
    "author": [
      {
        "name": "Jannik Buhr",
        "url": {}
      }
    ],
    "date": "2021-03-13",
    "categories": [],
    "contents": "\nJoin the Dark Side!\n‚Ä¶ we have cookies.\nFrom: knowyourmemeThere are many motivations to adding a dark mode to your site. I just like it, when things look consistent. So I also want my site to reflect that. But because at the same time I am also not very good at making things look consistent, which is why I mostly outsource design choices as much as I can. Here, for example, this means that I took the color values for the dark theme from the amazing nord color palette.\nBut let‚Äôs get into the practical side! How do we add a dark theme to complement our light theme to our distill site?\nAdding the button, css and java script\nFirst, we want a button that a user can click on to change the theme. I opted for the adjust button from Font Awesome. There is not much to do here, because those are already available in distill. Open up your _site.yml file and add an icon to the navbar:\nnavbar:\n  right:\n    - icon: fas fa-adjust\nWhile we are in this file, let‚Äôs also add the includes for the html file which will make the button work:\noutput:\n  distill::distill_article:\n    includes:\n      after_body: \"_after_body.html\"\n\nNote: I am omitting all the other things in our .yml file here and only show, what is being added. But I include the indentation-levels above the thing being added to show where to put it.\n\nThis is what _after_body.html looks like:\n<script>\nconst darkmodeToggle = document.getElementsByClassName(\"fas fa-adjust\")[0];\nlet theme = localStorage.getItem(\"theme\");\n\nif (!theme) {\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ) {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n}\nsetTheme();\n\nfunction switchTheme() {\n  if (theme === \"light\") {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n  localStorage.setItem(\"theme\", theme);\n  setTheme();\n  console.log(theme);\n}\n\nfunction setTheme() {\n  if (theme === \"dark\") {\n    document.body.classList.add('darkmode');\n  } else {\n    document.body.classList.remove('darkmode');\n  }\n}\n\ndarkmodeToggle.addEventListener('click', switchTheme)\n<\/script>\nUnfortunately, the only way I found to refer to the darkmode toggle icon in the navbar was by class name. I could not find a way to give it an id from _site.yml. However, this should be fine because the navbar is usually the first thing on the page and the script refers to the first element of class fas fa-adjust that it can find. It is also important to have this script be included after the body, so that the rest of the site can load first before the script tries to find the button. Typically you would do this using a script file and sourcing it with the option defer, but sourcing a script file doesn‚Äôt work here due to the way distill changes file-path‚Äôs between top-level sites and posts. This is why the complete script is in the html here. The script adds a class .darkmode to the html body (and removes it when toggled off). This choice is first based on browser preferences and then saved to local storage.\nThe last thing to modify is our theme.css to make use of this .darkmode class. For each thing we want to change about our theme when it get‚Äôs dark, we take the corresponding class and the darkmode class and add our styling e.g.\n.darkmode d-article,\n.darkmode d-appendix,\n.darkmode body {\n  background-color: black;\n  color: white;\n}\nYou can have a look at my theme.css file for inspiration on what thing you need to change (though the css could be way cleaner): https://github.com/jmbuhr/jmbuhr.github.io/blob/master/theme.css\n\n\n\n  \n    \n      Share: ¬†\n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/making-a-darkmode-for-your-distill-site/images/cookies.png",
    "last_modified": "2021-03-14T19:46:25+00:00",
    "input_file": {},
    "preview_width": 350,
    "preview_height": 263
  },
  {
    "path": "posts/enable-utterances-with-distill/",
    "title": "Enable utterances with distill",
    "description": "Interested in giving your readers the ability to comment on your {distill} blog? Look no further than utteranc.es.",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2021-02-19",
    "categories": [
      "Blog Comments",
      "utterances"
    ],
    "contents": "\n\nContents\nAllow readers to comment on your blog posts\nAcknowledgements\nutterances\nHTML File in RStudio Project\nSomeone commented üéâ\n\n\n\n\n\n\nAllow readers to comment on your blog posts\nYou may be interested, like I was, in allowing reader comments for your {distill} blog posts.\nUpon researching the best way, I found that there was some negativity towards some comment platforms, and heard that utterances was a good alternative for now. Thanks go to Ma√´lle Salmon - during her session on blogging, for R-Ladies Johannesburg, she used utterances on her teaching site, and also taught us about it.\nAcknowledgements\nI‚Äôd like to make my acknowledgements up front, because this post is just a synthesis of two excellent posts from Ma√´lle Salmon and Miles McBain.\nGoodbye Disqus! Hello, Utterances\nHow I got utteranc.es working on my rmarkdown distill blog\nThis distill issue, was also a big help. Thanks to Taras Kaduk.\nReading their posts will give you the tools you need to have comments on your blog posts using utterances. The below is a summary from these resources.\nutterances\n‚Äúutterances is a comments widget built on GitHub issues‚Äù.\nTo set it up you need to first install the utterances GitHub app, if you have not already done so.\nYou then need to allow the app access to your blog repository (repo) in GitHub. My blog repo is named Blog_Vebash (inspired, eh ü§ê).\n\nIn GitHub, navigate to the Issues tab in your Blog‚Äôs repo, and open the Labels section as highlighted below.\n\nChoose New label to add a label for the issue that will serve as your blog‚Äôs comments. I added mine as:\n\n   comments üí¨\n \n\nHTML File in RStudio Project\nWe need to add an .html file that contains the information for the utterances app. Like Miles did, I named mine utterances.html.\nCreate an utterances.html file as shown below, with your blog repo details in the place of the one noted there. Here is mine, copied nearly directly from Mile‚Äôs.\n ```\n <script>\n   document.addEventListener(\"DOMContentLoaded\", function () {\n     if (!/posts/.test(location.pathname)) {\n       return;\n     }\n\n     var script = document.createElement(\"script\");\n     script.src = \"https://utteranc.es/client.js\";\n     script.setAttribute(\"repo\", \"sciencificity/Blog_Vebash\");\n     script.setAttribute(\"issue-term\", \"title\");\n     script.setAttribute(\"crossorigin\", \"anonymous\");\n     script.setAttribute(\"label\", \"comments üí¨\");\n     script.setAttribute(\"theme\", \"github-light\");\n\n     /* wait for article to load, append script to article element */\n     var observer = new MutationObserver(function (mutations, observer) {\n       var article = document.querySelector(\"d-article\");\n       if (article) {\n         observer.disconnect();\n         /* HACK: article scroll */\n         article.setAttribute(\"style\", \"overflow-y: hidden\");\n         article.appendChild(script);\n       }\n     });\n\n     observer.observe(document.body, { childList: true });\n   });\n <\/script>\n ```\n\nYou may also follow Taras Kaduk‚Äôs advice and amend the d-article, in the querySelector, to d-appendix, if you want your comments to appear after the appendix, instead of between the article and the appendix.\nPlace utterances.html in your main blog folder.\n\nIn your _site.yml file add the includes part under your output format YAML. Now comments using utterances is available for all your blog posts.\noutput: \n  distill::distill_article:\n    includes:\n      in_header: utterances.html\nSomeone commented üéâ\nTo comment a reader has to log into their GitHub account, and give the utterances app permission.\nWhen a reader comments it opens a comment issue in your Blog‚Äôs GitHub repo via the utterances-bot.\nYou may respond on your blog post directly, or in the GitHub repo‚Äôs Issues page.\nIf you do it on the Issues page, you may also close the issue there.\nAs Ma√´lle remarks the downside is perhaps that your reader needs a GitHub account. I am hopeful this will not be too big of a deterrent for readers. If it is, don‚Äôt hesitate to reach out on Twitter - I am interested to hear your opinion.\nHappy {distill} Blogging\nüï∫\n\n\n\n  \n    \n      Share: ¬†\n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/enable-utterances-with-distill/preview2_small_.jpg",
    "last_modified": "2021-03-14T19:46:25+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-08-distill-it-down/",
    "title": "Distill it down",
    "description": "My experiences with building webpages and websites using some of the simpler R Studio tools.",
    "author": [
      {
        "name": "Lisa Lendway",
        "url": {}
      }
    ],
    "date": "2021-02-08",
    "categories": [],
    "contents": "\n\nNote: This post was originally written by Lisa Lendway on the RStudio Education blog - see the original post here\n\nIntroduction\nThis post describes my journey to creating a personal website using the distill package. Along the way, I took some detours using R Markdown to create webpages and a website for a course I teach. This is not a how-to tutorial (although I will provide links to resources I used to help me along the way) but rather a reflection on why I made the choices I made. I hope this might help some of you decide which tools you might use in creating your own website.\nMy blogdown fail\nMy journey with using the distill package to make a website began back in March of 2019 with the fancier, more customizable blogdown package. I had just gone through the R Studio instructor training and was about to be on spring break from my job teaching at Macalester College. The instructor training had me motivated to finally build a website and that break seemed like a perfect time to do it. At the time, the only tool I had heard of for doing such a thing was blogdown\nThen, like many in the US and other parts of the world experienced, the news came that I would be teaching online for the rest of the semester, my husband would be working from home, and we‚Äôd have our elementary school kids home learning, too. So, creating my website took a backseat. I gave myself about 2 hours one afternoon to try to get a blogdown site up and running, but I kept getting bogged down in the details and quickly gave up.\n\nMy blogdown attempt\nI just looked back at my attempt and it‚Äôs not as terrible as I initially thought. But, for me, the blogdown site was more than I needed. Ideally, I wanted something simpler, but what else was there?\nHello R Markdown and Netlify!\nAround that same time, I saw an advertisement for an R Studio webinar by Alison Hill and Desir√©e De Leon titled Sharing on Short Notice: How to Get Your Materials Online With R Markdown. Wow! The description sounded like just what I needed both for getting my personal website up and running and to help put R-related materials on the web in an easy way for my students. At the time, I was feeling overwhelmed with life (who wasn‚Äôt?), so I didn‚Äôt watch the webinar right away. Instead, I kept it open on a tab and tweeted out a reminder to myself:\n\n\n\nI want to use this now but just can't find the time. But thanks for sharing. I've added it to the summer to-do list. https://t.co/aDfLkivOkr\n\n‚Äî Dr.¬†Lisa Lendway (@lisalendway) April 1, 2020\n\n\nFast forward to mid-May 2020. My summer break had started, and one of the first things I did was finally watch the Sharing on Short Notice webinar. I loved their analogy of ‚ÄúClimbing R Markdown Mountain‚Äù and was surprised to learn that the two tools I had heard of, bookdown and blogdown, were two of the more complex tools. This webinar was also where I heard of Netlify (a platform for easily deploying a website) for the first time.\n\nIllustration from Sharing on Short Notice, A. Hill & D. De Leon\nIt wasn‚Äôt until August when I finally put the tools to action. I was in the thick of prepping course materials for my Introductory Data Science course. I knew I wanted to put them online both to make them easier for my students to access and to make them accessible to people other than my students. In the past, I had just uploaded either R Markdown files or knitted html files (with the Download Rmd option) to the course moodle site (moodle is a course management system).\nAfter watching the Sharing on Short Notice webinar a few more times, I decided to start at the base of the mountain, not even entering the website realm, by creating a single webpage from an R Markdown document. I did this for each topic in the course, ending up with five separate webpages for the course.You can see an example of my first site here. This is NOT fancy, but it worked well for me for a couple reasons:\nIt was EASY! The only new skill I had to learn was how to deploy to Netlify. The process goes like this: Create an R Project (I also put it on GitHub) ‚Äì> make the R Markdown document ‚Äì> knit to html ‚Äì> drop the project folder on Netlify (or, link to GitHub repo). It was very similar to what I had already been doing - uploading the files to moodle. To be honest, it was even easier! I only had to put a link to the Netlify webpage on the moodle page. And, because the Netlify page was deployed through my GitHub repository, changes to the document were automatically updated on the webpage when I pushed them out.\nI didn‚Äôt need to think a lot about website design because each topic was just a single webpage. I did make sure to use the same theme throughout, but that was about as much as I thought about web design. This keeps the YAML simple, which I like for my intro students since many of them download the R Markdown code for the files.\nI could easily compartmentalize the different course topics because they were their own projects (separate folders) and their own webpages. After the first few weeks of the quarter, I was prepping course material in a just-in-time fashion, usually finishing the same day the students needed to use it. Having separate projects made it easy to forget about an old topic and move onto a new one.\nThis list of pros for using R Markdown webpages has many similarities to the corresponding list of cons:\nBeing able to easily compartmentalize topics meant making 5 (actually 6, if I include an R Basics page I use for multiple courses) different webpages! Yikes, that‚Äôs a lot of webpages to manage and still required me to use the course management system to unite all the material together. Although I have folders organized fairly well, there are six smaller projects rather than one large project.\nThe webpages feel a little ‚Äúplain‚Äù. This was purposeful because I wanted a simple YAML but perhaps a bit sad :(\nAn R Markdown site\nBy the end of my first quarter of teaching, I was happy with the material I had produced and glad it was online where I could share it with a larger group, but I wanted to better unite the material. To do this, I started climbing ‚ÄúR Markdown Mountain‚Äù. I chose the easiest hike and created an R Markdown website: my course website.\nAlthough I was again tempted by some of the other options, I decided against them for the following reasons:\nBoth blogdown and distill were going to require more thought than I had time for, including potentially making changes to the R Markdown file. I also wanted to keep the same theme (albeit a bit plain) for anyone who was already using the webpages, especially my students, which might require changing some CSS - I wasn‚Äôt ready to delve into that yet, either.\nUsing the bookdown package seemed like a good option, but it would also require some changes to the R Markdown files and I could not figure out how to nicely add the code download button at the top of each chapter so students (and others) could download the R Markdown file for each topic.\nTruthfully, I also did quite a bit of ‚Äúcheating‚Äù in my R Markdown website. One of the bad parts of an R Markdown website is that you can‚Äôt have subfolders. Since my individual topic webpage projects each already had many files in them, this would have led to a very messy folder full of files. So, I just used the R Markdown site to unite all my individual webpages. Each topic still has its own webpage that is linked in the R Markdown website. I was able to create this site in well under an hour (yay!) and it serves its purpose for now.\n\n\n\nI‚Äôve finally put all my Intro Data Science materials in one place! It may not be the cutest website but it was quick to make. I hope the material might be useful to new #RStats users or people using R to teach data science. https://t.co/JkJMti8AEi\n\n‚Äî Dr.¬†Lisa Lendway (@lisalendway) November 23, 2020\n\n\nWhen time allows, I will reinvestigate the organization of this website to try to make it more cohesive.\nDistill it down\nRemember, this journey began with me wanting to create a personal website. I felt a little overwhelmed with a blogdown site when I first tried it but also felt like that was the route I needed to go since many of the R blogs I visited were built using blogdown. A couple of things changed my mind:\nWatching the distill portion of Sharing on Short Notice a couple more times illustrated how simple it was to create a site.\nReading some of the distill documentation confirmed that it was fairly easy to do.\nOther distill sites I perused looked really nice! Two of my favorites are by Ijeamaka Anyene and Shannon Pileggi, aka Piping Hot Data. Shannon even tweeted about using distill!\n\n\n\nI love the distill package! üôå üéäDistill empowered me to start sharing #rstats content üí™without the learning curve of blogdown/hugo üóª. You can check out my distill backed blog at https://t.co/dLa6zI1iSb. https://t.co/Q0CzNl6oEm\n\n‚Äî Shannon Pileggi (@PipingHotData) December 8, 2020\n\n\nThere was enough I could change about the website to make it look unique, but the defaults were a good start. My procrastination also seemed to pay off because new updates to the distill package made theming (customization, ie. font/title/background/navbar/etc. colors, sizes, styles, etc.) even easier with the create_theme() function. This function creates a CSS file with commonly used CSS selectors that you can easily change. You can change other CSS selectors, too, but you may need to know a little more about CSS to do that. If you‚Äôre like me and are very unfamiliar with CSS, I would recommend only changing the defined ones first - there is plenty there!\nAfter making the decision to go with distill to build my website, it was time to visit more resources. These are the ones I used most:\nAlison Hill and Desir√©e De Leon‚Äôs Sharing on Short Notice. I‚Äôve probably talked about this enough, but it is an amazing resource.\nThe distill documentation, which also happens to be a ‚Ä¶ distill website!\nThomas Mock‚Äôs distill how-to, which I wish I would have seen before starting to build my site rather than in the middle of it.\nAlison Hill‚Äôs recent updates on theming, if you want to change the default theme. And read it thoroughly (I may not have done that the first time)!\nOther people‚Äôs GitHub repos for their distill sites. The two I visited a lot were the corresponding repos for the sites I pointed out earlier: Ijeamaka Anyene and Shannon Pileggi, aka Piping Hot Data. This was a good way for me to dig into the code in more detail, and I could often copy, paste, and modify slightly to fit my needs.\nWith these resources at hand and open in my web browser, I was able to get started on buildng the site. The first time I tried, I got stuck on the CSS theming (hence the recommendation to only modify the easy-to-modify selectors at first). Then, I re-read the Create theme documentation (remember when I said to read that carefully the first time?), got a little help from @spcanelon on Twitter, and made a step-by-step guide for myself. The next day, I tried again, and had the website up and running within an hour! I documented this in detail on my first blog post on my distill website. The post also has embedded screencasts of me creating the site.\nI took some time after the video to further play around with customization, especially colors, most of which are inspired by William Morris‚Äôs Strawberry Thief textile. I‚Äôm happy with the website‚Äôs unique look combined with the simplicity. Each blog post has its own folder of files, so it is easy to stay organized. I like that blog posts are not re-rendered when the website is built. So, you need to knit each blog post and build the site in order for that blog to be updated, but you don‚Äôt have to worry about code in an old blog post breaking the website. I am starting to think that distill may be the tool I use for future course websites for all these reasons.\nIn conclusion, I hope I have given you some reason to check out distill for creating a website. Or maybe I‚Äôve even helped you decide to use some of the simpler tools available. Either way, I wish you luck on your journey.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-14T19:46:25+00:00",
    "input_file": {}
  }
]
