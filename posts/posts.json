[
  {
    "path": "posts/2021-03-18-use-github-actions-with-r-markdown-and-distill/",
    "title": "Use GitHub actions with R Markdown and Distill",
    "description": "How can you automatically render README, Distill website...",
    "author": [
      {
        "name": "Etienne Bacher",
        "url": {}
      }
    ],
    "date": "2021-03-19",
    "categories": [],
    "contents": "\n\nContents\nRender a README\nRender a Distill website\n\n\nNote: This post was originally written by Etienne Bacher - see the original post here\n\n The preview image comes from: https://github.com/marketplace/actions/cancel-workflow-action \nSometimes, it is useful to automatically render an R Markdown document or a website, made with distill for example. In this post, I will present you two cases in which I use GitHub Actions to automatically do that.\nRender a README\nOne of my GitHub repos is a list of JavaScript libraries that have been adapted in R. You can find the repo here. I wanted this list to be easy to update, so that it can be done on GitHub directly. The idea is that when I (or someone else) find a JavaScript library that has been adapted into an R package, I add it to a CSV file on GitHub. The problem is that this CSV file is then used into an R Markdown file, that creates a clean README with all the information.\nWithout GitHub Actions, in addition to modify the CSV file, I would have to clone the repo, open it in RStudio, render the README, and push it back on GitHub.\nBut this task is repetitive: apart from the details I add to the CSV file, it can be automated. This is where GitHub Actions comes into play. The idea is that you create a .yml file that contains the R code you want to run to render the README. This is what mine looks like:\n\non:\n  push:\n    branches: master\n\nname: Render README\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install rmarkdown\n        run: Rscript -e 'install.packages(\"rmarkdown\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\", output_format = \"md_document\")'\n      - name: Commit results\n        run: |\n          git commit README.md -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\nThe first two parts are quite self-explanatory:\nthe jobs run every time there’s a push on the master branch;\nthe name of this process is “Render README”.\nThe third part needs a bit more details. There are some parts that I just copied and pasted from the R actions repository, but basically you can see that first it initiates R and pandoc (setup-r@v1, setup-pandoc@v1). Then, I run an R script to install the rmarkdown package and I use it to render the Rmd file to create README.md.\nLast but not least, GitHub Actions rendered the README, but the changes are not on the repo yet. Hence, the last step is to commit the changes with a message and to push them on the master branch. Now, every time I change the CSV file on the master branch, the README will be automatically rendered (after a few minutes, since all the actions have to run first).\nI said this was the .yaml file I use on my repo, but I lied a bit. Actually, for my list of JavaScript libraries to be up-to-date, I also need to scrape the htmlwidgets gallery once in a while. Hence, I use cron to run GitHub Actions every Sunday night at 23:59. See the documentation to know how to format your schedule. Finally, here’s the .yaml file I use:\n\non:\n  push:\n    branches: master\n  schedule:\n    - cron: '59 23 * * 0'\n\nname: Render README\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install rmarkdown\n        run: Rscript -e 'install.packages(\"rmarkdown\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\", output_format = \"md_document\")'\n      - name: Commit results\n        run: |\n          git commit README.md -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\nRender a Distill website\nTo automatically render your distill website on every push on master branch, the logic is very similar. In my .yml file, there are two main differences.\nThe first one is that I need to install more packages to render my distill website. Some will be essential for everyone (e.g distill) but other packages won’t be (e.g postcards).\nThe second one is more tricky, but could be useful for several people. Before using distill, I used blogdown. For some reasons (and mostly because distill is much easier in my opinion), I switched to distill. However, this switch changed a few URLs addresses, for my posts for instance. Therefore, I needed a _redirects file to, well, redirect the old URLs to the new ones and prevent 404 errors. The _redirects file needs to be in the _site folder, because it is the folder that is used by Netlify to build the site. The problem here is that this folder is deleted and re-generated every time rmarkdown::render_site() is called, i.e every time the website is locally built. Therefore, the _redirects file couldn’t just stay there. I had to add it manually after every build.\nThe solution to that is to automate this in GitHub Actions. After having rendered the website, I just copy _redirects from its location on the repo to the _site folder. Now, every time I change something on the master branch, the distill website is rebuilt, and then the _redirects file is added.\nOne drawback though: since these files are changed on GitHub only, the first thing you have to do when opening your site project in RStudio is to pull the changes (or, like me, you will struggle with merge conflicts).\nTo finish this post, here’s the .yml file for my distill website:\n\non:\n  push:\n    branches: master\n\nname: Render & Deploy Site\n\njobs:\n  build:\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: r-lib/actions/setup-r@master\n\n      - uses: r-lib/actions/setup-pandoc@master\n\n      - name: Install dependencies\n        run: |\n          install.packages(\"rmarkdown\")\n          install.packages(\"distill\")\n          install.packages(\"postcards\")\n          install.packages(\"devtools\")\n          install.packages(\"fs\")\n          devtools::install_github(\"etiennebacher/ebmisc\")\n        shell: Rscript {0}\n\n      - name: Render Site\n        run: Rscript -e 'rmarkdown::render_site(encoding = \"UTF-8\")'\n      - name: Copy redirects\n        run: Rscript -e 'fs::file_copy(\"_redirects\", \"_site/_redirects\")'\n      - name: Commit results\n        run: |\n          git add -A\n          git commit -m 'Rebuild site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n\n\n\n\n",
    "preview": "posts/2021-03-18-use-github-actions-with-r-markdown-and-distill/gha_image.jpg",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-16-postcards-distill/",
    "title": "M-F-E-O: postcards + distill",
    "description": "The new postcards package and distill are M-F-E-O (made for each other). Here is a brief walk-through to add a postcards personal profile page to your distill website or blog, using only R Markdown.",
    "author": [
      {
        "name": "Alison Hill",
        "url": {}
      }
    ],
    "date": "2021-03-16",
    "categories": [],
    "contents": "\n\nNote: This post was originally written by Alison Hill - see the original post on her blog here\n\n\n\nPhoto by Joyce McCown on Unsplash\nThis is a very brief “postcard to myself” about how to use the new postcards package by Sean Kross. What problem does postcards solve?\n\n“Create simple, beautiful personal websites and landing pages using only R Markdown.”\n— postcards README.md\n\nPostcards includes four templates:\nJolla,\nJolla Blue,\nTrestles, and\nOnofre.\nYou can see postcards::trestles in action here: http://jtleek.com/\nAnd here (this is where we are headed!):\n\nDistill is a package that also helps you make simple, beautiful websites and blogs using only R Markdown. They are M-F-E-O (‘made for each other’: this is a “Sleepless in Seattle” reference with sadly, a complete lack of video to support). But if you’ve seen the movie this scene may sound familiar:\n\nBecky: So I mailed your letter.\nAnnie: “Dear Annie, thanks for your letter. It was great. You sound neat. We’re very excited about meeting you in New York on Valentine’s Day and seeing if we are M-F-E-O. See you soon. Sleepless in Seattle.”\nBecky: M-F-E-O?\nAnnie: “Made for each other.”\nBecky: It’s cute. It’s like a little clue. So he can’t write. Big deal. Verbal ability is a highly over-rated thing in a guy and our pathetic need for it is what gets us into so much trouble.\n— Sleepless in Seattle, script from https://plantyourstory.com/mfeo-its-like-a-little-clue/\n\nConsider this post like a little clue (I’m using it as a sandbox before updating our distill documentation for this new feature). Here is our existing signpost in the distill docs. With the CRAN versions of all three packages now, you can embed a postcards page within your distill site. This means the page will come with all your distill goodies like site navigation, theme, and google-analytics support.\n{{% alert note %}} You can see the demo site I made alongside this post here: https://apreshill.github.io/mfeo/ (source: https://github.com/apreshill/mfeo). {{% /alert %}}\nPre-requisites\nYou’ll need the CRAN versions of three packages:\ndistill (v >= 1.2) (see: https://pkgs.rstudio.com/distill/news/index.html#distill-v1-2-cran-)\nrmarkdown (v >= 2.7)\npostcards (v >= 0.2.0)\ninstall.packages(c(\"distill\", \"rmarkdown\", \"postcards\"))\nYou can check these package versions as follows:\npackageVersion(\"distill\")\npackageVersion(\"rmarkdown\")\npackageVersion(\"postcards\")\nMake a website\nIn RStudio, create a new project using File > New Project > New Directory > New Project. Then, inside your new empty project, use your R console to do the following:\n\n\nlibrary(distill)\ncreate_website(dir = \".\", title = \"mfeo\", gh_pages = TRUE)\n\n\n\nAt this point, I recommend closing RStudio completely and opening up your project again. This way you should see the “Build” tab.\n\nNow build your site! You should see the “boilerplate” website template at this point.\nAdd a postcard\nIn your R console, use the postcards package to create a new postcard:\n\n\ncreate_postcard(file = \"tobi.Rmd\") # future name of .Rmd file\n\n\n\nAlternatively, you could use distill::create_article() to make a new page. To make a postcard, specify the template (one of: jolla, jolla-blue, onofre, trestles) and package = 'postcards':\n\n\ncreate_article(file = \"tobi\",         # future name of .Rmd file\n               template = \"jolla\",    # name of template\n               package = \"postcards\") # package that includes the template\n\n\n\nLet’s add a link to our new file in the top navbar. Open up your _site.yml file and add:\nname: \".\"\ntitle: \"mfeo\"\ndescription: |\n  mfeo\noutput_dir: \"docs\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\n    - text: \"Tobi\"              # add\n      href: tobi.html           # add\noutput: distill::distill_article\nSince my file is named tobi.Rmd, that means the rendered file will be tobi.html, so that is my href key in the _site.yml. If you save that file, you should see your website refresh, and look something like this!\nJolla postcard page in distill websiteAdd a theme\nFor fun, let’s go ahead and add a custom distill theme while we’re at it.\n\n\ncreate_theme(\"postcards\")\n\n\n\n{{% alert note %}} You can see copy my theme file from here: https://github.com/apreshill/mfeo/blob/master/postcards.css. {{% /alert %}}\nThis should print to your R console:\nv Created CSS file at postcards.css\no TODO: Customize it to suit your needs\no TODO: Add 'theme: postcards.css' to your site or article YAML\n\nSee docs at <https://rstudio.github.io/distill/website.html#theming>\nI want a full-site theme, so I added theme: postcards.css to my _site.yml file. I followed the distill docs on theming here. Re-build my website, and now I see:\nJolla postcard page in themed distill websiteSwitch the homepage\nNow you may be wishing that your postcards page was your homepage- the place where visitors first land when they visit your website. The homepage in a distill website is named index.Rmd, so we need to remove the current index.Rmd file and replace it with tobi.Rmd. But we cannot just rename the files…\nIf you open up index.Rmd, you should see this yaml:\n---\ntitle: \"mfeo\"\ndescription: |\n  Welcome to the website. I hope you enjoy it!\nsite: distill::distill_website\n---\nThat site key is very important to keep in the index.Rmd file. Steps:\nLet’s start by adding site: distill::distill_website to the yaml of your postcards page, mine is named tobi.Rmd.\nAfter doing that, you can delete index.Rmd.\nNext, rename tobi.Rmd -> index.Rmd.\nFinally, clean up your _site.yml - you can remove the link we added above to tobi.html.\nRe-build your site and Tobi’s shining face should greet you from the homepage!\nFill-in your postcard\nOf course, you can add your own image file to the project root at this point, and then personalize your index.Rmd using the postcards template:\n---\ntitle: \"Alison Hill\"\nimage: \"alison.jpg\"\nlinks:\n  - label: LinkedIn\n    url: \"https://www.linkedin.com/in/alisonpresmaneshill/\"\n  - label: Twitter\n    url: \"https://twitter.com/apreshill\"\n  - label: GitHub\n    url: \"https://github.com/apreshill\"\n  - label: ORCID iD\n    url: \"https://orcid.org/0000-0002-8082-1890\"\nsite: distill::distill_website\noutput:\n  postcards::jolla\n---\nHere is my “after”:\nJolla as themed homepageAdd a blog\nBack in your console, we can add a blog, using distill:\n\n\ncreate_post(\"welcome\")\n\n\n\nIf you do this with a blog already, it just adds a single post. But if you do this without posts set up, it does some nice things for you:\nCreates a directory called _posts/ to hold all your future blog posts.\nCreates a new post with a “slug” including the date and the name of the post (here, mine was \"welcome\").\nYour new post should open up - go ahead and knit this post. Posts in distill need to be knit intentionally, so they will never be automatically built when you rebuild your website.\nWe also probably want to add a listing page to list all our blog posts. Do this by adding a blank .Rmd file to your project root, I’ll call mine blog.Rmd but there is no magic to this file name:\n\n\nfile.edit(\"blog.Rmd\")\n\n\n\nThen open up your new blog.Rmd and add a YAML (no content below the YAML):\n---\ntitle: \"Blog\"  # any name you want here\nlisting: posts # do this exactly\n---\nFinally, add a link to your blog in your upper navbar so people can actually find it! Do this by editing _site.yml one last time (remember, since my listing .Rmd is named blog.Rmd, then the href I want to link to is blog.html):\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\n    - text: \"Blog\"      # add\n      href: blog.html   # add\nNow, admire your final polished product!\nSwitch your postcard\nLet’s say you decide you want to switch it up and use the trestles theme, instead of jolla. Easy. Open up your index.Rmd and find these lines in the YAML:\n---\noutput:\n  postcards::jolla\n---\nAnd change to:\n---\noutput:\n  postcards::trestles\n---\nRe-build your site!\n\nPublishing\nI won’t be able to cover all the publishing options here, but you can read up on the options for publishing distill websites here. If you want to take a site like mine that you built, I recommend GitHub Pages. You can use the usethis package to run:\n\n\nusethis::use_git()\nusethis::use_github()\n\n\n\n{{% alert note %}} I also just learned about the new usethis::use_github_pages() to turn on and/or (re)configure GitHub Pages! {{% /alert %}}\nThen in the GitHub project, navigate over to “Settings” and scroooooooll down to choose:\nGitHub Pages settings for distill websitesFor this to work, make sure your site is building to docs/ locally, and that you are committing and pushing the docs/ directory to GitHub.\n\n\n\n",
    "preview": "posts/2021-03-16-postcards-distill/featured.jpg",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-12-making-a-darkmode-for-your-distill-site/",
    "title": "Making a Darkmode for your distill site",
    "description": "We build a darkmode for our distill site using css and a bit of java script.",
    "author": [
      {
        "name": "Jannik Buhr",
        "url": {}
      }
    ],
    "date": "2021-03-12",
    "categories": [],
    "contents": "\n\nNote: This post was originally written by Jannik Buhr - see the original post here\n\nJoin the Dark Side!\n… we have cookies.\nFrom: knowyourmemeThere are many motivations to adding a dark mode to your site. I just like it, when things look consistent. So I also want my site to reflect that. But because at the same time I am also not very good at making things look consistent, which is why I mostly outsource design choices as much as I can. Here, for example, this means that I took the color values for the dark theme from the amazing nord color palette.\nBut let’s get into the practical side! How do we add a dark theme to complement our light theme to our distill site?\nAdding the button, css and java script\nFirst, we want a button that a user can click on to change the theme. I opted for the adjust button from Font Awesome. There is not much to do here, because those are already available in distill. Open up your _site.yml file and add an icon to the navbar:\nnavbar:\n  right:\n    - icon: fas fa-adjust\nWhile we are in this file, let’s also add the includes for the html file which will make the button work:\noutput:\n  distill::distill_article:\n    includes:\n      after_body: \"_after_body.html\"\n\nNote: I am omitting all the other things in our .yml file here and only show, what is being added. But I include the indentation-levels above the thing being added to show where to put it.\n\nThis is what _after_body.html looks like:\n<script>\nconst darkmodeToggle = document.getElementsByClassName(\"fas fa-adjust\")[0];\nlet theme = localStorage.getItem(\"theme\");\n\nif (!theme) {\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ) {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n}\nsetTheme();\n\nfunction switchTheme() {\n  if (theme === \"light\") {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n  localStorage.setItem(\"theme\", theme);\n  setTheme();\n  console.log(theme);\n}\n\nfunction setTheme() {\n  if (theme === \"dark\") {\n    document.body.classList.add('darkmode');\n  } else {\n    document.body.classList.remove('darkmode');\n  }\n}\n\ndarkmodeToggle.addEventListener('click', switchTheme)\n<\/script>\nUnfortunately, the only way I found to refer to the darkmode toggle icon in the navbar was by class name. I could not find a way to give it an id from _site.yml. However, this should be fine because the navbar is usually the first thing on the page and the script refers to the first element of class fas fa-adjust that it can find. It is also important to have this script be included after the body, so that the rest of the site can load first before the script tries to find the button. Typically you would do this using a script file and sourcing it with the option defer, but sourcing a script file doesn’t work here due to the way distill changes file-path’s between top-level sites and posts. This is why the complete script is in the html here. The script adds a class .darkmode to the html body (and removes it when toggled off). This choice is first based on browser preferences and then saved to local storage.\nThe last thing to modify is our theme.css to make use of this .darkmode class. For each thing we want to change about our theme when it get’s dark, we take the corresponding class and the darkmode class and add our styling e.g.\n.darkmode d-article,\n.darkmode d-appendix,\n.darkmode body {\n  background-color: black;\n  color: white;\n}\nYou can have a look at my theme.css file for inspiration on what thing you need to change (though the css could be way cleaner): https://github.com/jmbuhr/jmbuhr.github.io/blob/master/theme.css\n\n\n\n",
    "preview": "posts/2021-03-12-making-a-darkmode-for-your-distill-site/images/cookies.png",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {},
    "preview_width": 350,
    "preview_height": 263
  },
  {
    "path": "posts/2021-02-19-enable-utterances-with-distill/",
    "title": "Enable utterances with distill",
    "description": "Interested in giving your readers the ability to comment on your {distill} blog? Look no further than utteranc.es.",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2021-02-20",
    "categories": [],
    "contents": "\n\nContents\nAllow readers to comment on your blog posts\nAcknowledgements\nutterances\nHTML File in RStudio Project\nSomeone commented 🎉\n\n\n\nNote: This post was originally written by Vebash Naidoo on the Sciencificity’s Blog - see the original post here\n\n\n\n\n\nAllow readers to comment on your blog posts\nYou may be interested, like I was, in allowing reader comments for your {distill} blog posts.\nUpon researching the best way, I found that there was some negativity towards some comment platforms, and heard that utterances was a good alternative for now. Thanks go to Maëlle Salmon - during her session on blogging, for R-Ladies Johannesburg, she used utterances on her teaching site, and also taught us about it.\nAcknowledgements\nI’d like to make my acknowledgements up front, because this post is just a synthesis of two excellent posts from Maëlle Salmon and Miles McBain.\nGoodbye Disqus! Hello, Utterances\nHow I got utteranc.es working on my rmarkdown distill blog\nThis distill issue, was also a big help. Thanks to Taras Kaduk.\nReading their posts will give you the tools you need to have comments on your blog posts using utterances. The below is a summary from these resources.\nutterances\n“utterances is a comments widget built on GitHub issues”.\nTo set it up you need to first install the utterances GitHub app, if you have not already done so.\nYou then need to allow the app access to your blog repository (repo) in GitHub. My blog repo is named Blog_Vebash (inspired, eh 🙊).\n\nIn GitHub, navigate to the Issues tab in your Blog’s repo, and open the Labels section as highlighted below.\n\nChoose New label to add a label for the issue that will serve as your blog’s comments. I added mine as:\n\n   comments 💬\n \n\nHTML File in RStudio Project\nWe need to add an .html file that contains the information for the utterances app. Like Miles did, I named mine utterances.html.\nCreate an utterances.html file as shown below, with your blog repo details in the place of the one noted there. Here is mine, copied nearly directly from Mile’s.\n ```\n <script>\n   document.addEventListener(\"DOMContentLoaded\", function () {\n     if (!/posts/.test(location.pathname)) {\n       return;\n     }\n\n     var script = document.createElement(\"script\");\n     script.src = \"https://utteranc.es/client.js\";\n     script.setAttribute(\"repo\", \"sciencificity/Blog_Vebash\");\n     script.setAttribute(\"issue-term\", \"title\");\n     script.setAttribute(\"crossorigin\", \"anonymous\");\n     script.setAttribute(\"label\", \"comments 💬\");\n     script.setAttribute(\"theme\", \"github-light\");\n\n     /* wait for article to load, append script to article element */\n     var observer = new MutationObserver(function (mutations, observer) {\n       var article = document.querySelector(\"d-article\");\n       if (article) {\n         observer.disconnect();\n         /* HACK: article scroll */\n         article.setAttribute(\"style\", \"overflow-y: hidden\");\n         article.appendChild(script);\n       }\n     });\n\n     observer.observe(document.body, { childList: true });\n   });\n <\/script>\n ```\n\nYou may also follow Taras Kaduk’s advice and amend the d-article, in the querySelector, to d-appendix, if you want your comments to appear after the appendix, instead of between the article and the appendix.\nPlace utterances.html in your main blog folder.\n\nIn your _site.yml file add the includes part under your output format YAML. Now comments using utterances is available for all your blog posts.\noutput:\n  distill::distill_article:\n    includes:\n      in_header: utterances.html\nSomeone commented 🎉\nTo comment a reader has to log into their GitHub account, and give the utterances app permission.\nWhen a reader comments it opens a comment issue in your Blog’s GitHub repo via the utterances-bot.\nYou may respond on your blog post directly, or in the GitHub repo’s Issues page.\nIf you do it on the Issues page, you may also close the issue there.\nAs Maëlle remarks the downside is perhaps that your reader needs a GitHub account. I am hopeful this will not be too big of a deterrent for readers. If it is, don’t hesitate to reach out on Twitter - I am interested to hear your opinion.\nHappy {distill} Blogging\n🕺\n\n\n\n",
    "preview": "posts/2021-02-19-enable-utterances-with-distill/preview2_small_.jpg",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-08-distill-it-down/",
    "title": "Distill it down",
    "description": "My experiences with building webpages and websites using some of the simpler R Studio tools.",
    "author": [
      {
        "name": "Lisa Lendway",
        "url": {}
      }
    ],
    "date": "2021-02-08",
    "categories": [],
    "contents": "\n\nNote: This post was originally written by Lisa Lendway on the RStudio Education blog - see the original post here\n\n\n\nPhoto by Raw Pixel\nIntroduction\nThis post describes my journey to creating a personal website using the distill package. Along the way, I took some detours using R Markdown to create webpages and a website for a course I teach. This is not a how-to tutorial (although I will provide links to resources I used to help me along the way) but rather a reflection on why I made the choices I made. I hope this might help some of you decide which tools you might use in creating your own website.\nMy blogdown fail\nMy journey with using the distill package to make a website began back in March of 2019 with the fancier, more customizable blogdown package. I had just gone through the R Studio instructor training and was about to be on spring break from my job teaching at Macalester College. The instructor training had me motivated to finally build a website and that break seemed like a perfect time to do it. At the time, the only tool I had heard of for doing such a thing was blogdown\nThen, like many in the US and other parts of the world experienced, the news came that I would be teaching online for the rest of the semester, my husband would be working from home, and we’d have our elementary school kids home learning, too. So, creating my website took a backseat. I gave myself about 2 hours one afternoon to try to get a blogdown site up and running, but I kept getting bogged down in the details and quickly gave up.\n\nMy blogdown attempt\nI just looked back at my attempt and it’s not as terrible as I initially thought. But, for me, the blogdown site was more than I needed. Ideally, I wanted something simpler, but what else was there?\nHello R Markdown and Netlify!\nAround that same time, I saw an advertisement for an R Studio webinar by Alison Hill and Desirée De Leon titled Sharing on Short Notice: How to Get Your Materials Online With R Markdown. Wow! The description sounded like just what I needed both for getting my personal website up and running and to help put R-related materials on the web in an easy way for my students. At the time, I was feeling overwhelmed with life (who wasn’t?), so I didn’t watch the webinar right away. Instead, I kept it open on a tab and tweeted out a reminder to myself:\n\n\n\nI want to use this now but just can't find the time. But thanks for sharing. I've added it to the summer to-do list. https://t.co/aDfLkivOkr\n\n— Dr. Lisa Lendway (@lisalendway) April 1, 2020\n\n\nFast forward to mid-May 2020. My summer break had started, and one of the first things I did was finally watch the Sharing on Short Notice webinar. I loved their analogy of “Climbing R Markdown Mountain” and was surprised to learn that the two tools I had heard of, bookdown and blogdown, were two of the more complex tools. This webinar was also where I heard of Netlify (a platform for easily deploying a website) for the first time.\n\nIllustration from Sharing on Short Notice, A. Hill & D. De Leon\nIt wasn’t until August when I finally put the tools to action. I was in the thick of prepping course materials for my Introductory Data Science course. I knew I wanted to put them online both to make them easier for my students to access and to make them accessible to people other than my students. In the past, I had just uploaded either R Markdown files or knitted html files (with the Download Rmd option) to the course moodle site (moodle is a course management system).\nAfter watching the Sharing on Short Notice webinar a few more times, I decided to start at the base of the mountain, not even entering the website realm, by creating a single webpage from an R Markdown document. I did this for each topic in the course, ending up with five separate webpages for the course.You can see an example of my first site here. This is NOT fancy, but it worked well for me for a couple reasons:\nIt was EASY! The only new skill I had to learn was how to deploy to Netlify. The process goes like this: Create an R Project (I also put it on GitHub) –> make the R Markdown document –> knit to html –> drop the project folder on Netlify (or, link to GitHub repo). It was very similar to what I had already been doing - uploading the files to moodle. To be honest, it was even easier! I only had to put a link to the Netlify webpage on the moodle page. And, because the Netlify page was deployed through my GitHub repository, changes to the document were automatically updated on the webpage when I pushed them out.\nI didn’t need to think a lot about website design because each topic was just a single webpage. I did make sure to use the same theme throughout, but that was about as much as I thought about web design. This keeps the YAML simple, which I like for my intro students since many of them download the R Markdown code for the files.\nI could easily compartmentalize the different course topics because they were their own projects (separate folders) and their own webpages. After the first few weeks of the quarter, I was prepping course material in a just-in-time fashion, usually finishing the same day the students needed to use it. Having separate projects made it easy to forget about an old topic and move onto a new one.\nThis list of pros for using R Markdown webpages has many similarities to the corresponding list of cons:\nBeing able to easily compartmentalize topics meant making 5 (actually 6, if I include an R Basics page I use for multiple courses) different webpages! Yikes, that’s a lot of webpages to manage and still required me to use the course management system to unite all the material together. Although I have folders organized fairly well, there are six smaller projects rather than one large project.\nThe webpages feel a little “plain”. This was purposeful because I wanted a simple YAML but perhaps a bit sad :(\nAn R Markdown site\nBy the end of my first quarter of teaching, I was happy with the material I had produced and glad it was online where I could share it with a larger group, but I wanted to better unite the material. To do this, I started climbing “R Markdown Mountain”. I chose the easiest hike and created an R Markdown website: my course website.\nAlthough I was again tempted by some of the other options, I decided against them for the following reasons:\nBoth blogdown and distill were going to require more thought than I had time for, including potentially making changes to the R Markdown file. I also wanted to keep the same theme (albeit a bit plain) for anyone who was already using the webpages, especially my students, which might require changing some CSS - I wasn’t ready to delve into that yet, either.\nUsing the bookdown package seemed like a good option, but it would also require some changes to the R Markdown files and I could not figure out how to nicely add the code download button at the top of each chapter so students (and others) could download the R Markdown file for each topic.\nTruthfully, I also did quite a bit of “cheating” in my R Markdown website. One of the bad parts of an R Markdown website is that you can’t have subfolders. Since my individual topic webpage projects each already had many files in them, this would have led to a very messy folder full of files. So, I just used the R Markdown site to unite all my individual webpages. Each topic still has its own webpage that is linked in the R Markdown website. I was able to create this site in well under an hour (yay!) and it serves its purpose for now.\n\n\n\nI’ve finally put all my Intro Data Science materials in one place! It may not be the cutest website but it was quick to make. I hope the material might be useful to new #RStats users or people using R to teach data science. https://t.co/JkJMti8AEi\n\n— Dr. Lisa Lendway (@lisalendway) November 23, 2020\n\n\nWhen time allows, I will reinvestigate the organization of this website to try to make it more cohesive.\nDistill it down\nRemember, this journey began with me wanting to create a personal website. I felt a little overwhelmed with a blogdown site when I first tried it but also felt like that was the route I needed to go since many of the R blogs I visited were built using blogdown. A couple of things changed my mind:\nWatching the distill portion of Sharing on Short Notice a couple more times illustrated how simple it was to create a site.\nReading some of the distill documentation confirmed that it was fairly easy to do.\nOther distill sites I perused looked really nice! Two of my favorites are by Ijeamaka Anyene and Shannon Pileggi, aka Piping Hot Data. Shannon even tweeted about using distill!\n\n\n\nI love the distill package! 🙌 🎊Distill empowered me to start sharing #rstats content 💪without the learning curve of blogdown/hugo 🗻. You can check out my distill backed blog at https://t.co/dLa6zI1iSb. https://t.co/Q0CzNl6oEm\n\n— Shannon Pileggi (@PipingHotData) December 8, 2020\n\n\nThere was enough I could change about the website to make it look unique, but the defaults were a good start. My procrastination also seemed to pay off because new updates to the distill package made theming (customization, ie. font/title/background/navbar/etc. colors, sizes, styles, etc.) even easier with the create_theme() function. This function creates a CSS file with commonly used CSS selectors that you can easily change. You can change other CSS selectors, too, but you may need to know a little more about CSS to do that. If you’re like me and are very unfamiliar with CSS, I would recommend only changing the defined ones first - there is plenty there!\nAfter making the decision to go with distill to build my website, it was time to visit more resources. These are the ones I used most:\nAlison Hill and Desirée De Leon’s Sharing on Short Notice. I’ve probably talked about this enough, but it is an amazing resource.\nThe distill documentation, which also happens to be a … distill website!\nThomas Mock’s distill how-to, which I wish I would have seen before starting to build my site rather than in the middle of it.\nAlison Hill’s recent updates on theming, if you want to change the default theme. And read it thoroughly (I may not have done that the first time)!\nOther people’s GitHub repos for their distill sites. The two I visited a lot were the corresponding repos for the sites I pointed out earlier: Ijeamaka Anyene and Shannon Pileggi, aka Piping Hot Data. This was a good way for me to dig into the code in more detail, and I could often copy, paste, and modify slightly to fit my needs.\nWith these resources at hand and open in my web browser, I was able to get started on buildng the site. The first time I tried, I got stuck on the CSS theming (hence the recommendation to only modify the easy-to-modify selectors at first). Then, I re-read the Create theme documentation (remember when I said to read that carefully the first time?), got a little help from @spcanelon on Twitter, and made a step-by-step guide for myself. The next day, I tried again, and had the website up and running within an hour! I documented this in detail on my first blog post on my distill website. The post also has embedded screencasts of me creating the site.\nI took some time after the video to further play around with customization, especially colors, most of which are inspired by William Morris’s Strawberry Thief textile. I’m happy with the website’s unique look combined with the simplicity. Each blog post has its own folder of files, so it is easy to stay organized. I like that blog posts are not re-rendered when the website is built. So, you need to knit each blog post and build the site in order for that blog to be updated, but you don’t have to worry about code in an old blog post breaking the website. I am starting to think that distill may be the tool I use for future course websites for all these reasons.\nIn conclusion, I hope I have given you some reason to check out distill for creating a website. Or maybe I’ve even helped you decide to use some of the simpler tools available. Either way, I wish you luck on your journey.\n\n\n\n",
    "preview": "posts/2021-02-08-distill-it-down/images/strawberry-thumbnail.png",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {},
    "preview_width": 400,
    "preview_height": 400
  },
  {
    "path": "posts/2020-12-12-tricks-blogdown-to-distill/",
    "title": "Misc tricks when migrating from blogdown to distill",
    "description": "Some small things I learned as I migrated my blog from blogdown to distill.",
    "author": [
      {
        "name": "Frie Preu",
        "url": {}
      }
    ],
    "date": "2020-12-12",
    "categories": [],
    "contents": "\n\nNote: This post was originally written by Frie Preu - see the original post here\n\n\nSo I jumped on the distill train. Mainly because I was a bit annoyed by the complexities of Hugo’s file system which always tripped me up when I tried to include images and datasets. Plus, I’m not super active on my blog anyway so I don’t want to come back to it every couple of months only to find out that something has broken.\nAnyway, at the risk of becoming one of those blogs that only blogs about blogging frameworks1, here are some tips and tricks I learned over the last 1.5 weeks2.\nEdit 2020-12-14: thanks to the magic of Twitter / with the help of Maëlle Salmon, I found the “meme” (more like comic, d’uh) I was talking about in footnote 1 - shoutout to you if you know what I’m talking about because you read the footnote! Enjoy!\nImage from https://rakhim.org/images/honestly-undefined/blogging.jpgInternal links\nIn Hugo I always specified internal links within my site like so:\n[r projects](/rprojects/)\nassuming i wanted to link to https://frie.codes/rprojects.\nIn distill, you link to the .html file, like so:\n[r projects](/rprojects.html)\nyou can also add custom anchors (certainly also possible in blogdown but I never did it somehow):\n[r projects](/rprojects.html#newsanchor)\nRedirecting your old URLs\nI was not able to configure my distill site so that it would replicate the exact URLs of my old Hugo/blogdown page. Some of those were not so nice anyway, e.g. my about page was under frie.codes/page/about/ and not at frie.codes/about. I didn’t want to have breaking links, so I wanted to find a way to redirect users to the new URLs.\nTurns out if you use Netlify, you can set up either a _redirects file or include your redirects in netlify.toml. While the latter is a bit more verbose, it has the advantage that you don’t have to take care of it ending up in _site. Here’s a snippet from my netlify.toml:\n# Redirects from what the browser requests to what we serve\n[[redirects]]\n  from = \"/post/\"\n  to = \"/\"\n[[redirects]]\n  from = \"/git-commit-wordcloud-rstats/\"\n  to = \"/posts/git-commit-wordcloud-rstats\"\n[[redirects]]\n  from = \"/using-r-to-remove-audiobooks-from-spotify/\"\n  to = \"/posts/using-r-to-remove-audiobooks-from-spotify\"\n[[redirects]]\n  from = \"/automate-the-boring-stuff/\"\n  to = \"/posts/automate-the-boring-stuff/\"\n[[redirects]]\n  from = \"/oldrscripts-intro-to-r/\"\n  to = \"/posts/oldrscripts-intro-to-r/\"\nYou can check out the relevant documentation here and my netlify.toml here. I suspect similar things are possible with other hosting providers, so I’d google something like “hosting provider redirects”.\nFolder structure\nIn blogdown/Hugo, I could set “nice” slugs (the part in the URL after the main domain, e.g. curl-vs-rcurl in https://frie.codes/curl-vs-rcurl) via the slug yaml frontend matter option…\n---\ntitle: \"curl vs RCurl or: how to choose a package\"\noutput: html_document\ndraft: false\ndate: 2019-05-21\nslug: curl-vs-rcurl\ntags: [ds-texts]\n---\n…while at the same time keeping my folders nicely organized by date:\ncontent/post\n├── 2019-01-05-dot-dot-dot-underscore-camel\n├── 2019-01-05-to-for-loop-or-not-to-for-loop\n├── 2019-05-19_introducing-this-blog\n├── 2019-05-20-curl-vs-rcurl\n├── 2019-06-19_oldrscripts-intro-to-r\n├── 2019-07-23_switching-to-gitlab\n├── 2019-10-19-automate-the-boring-stuff\n├── 2020-08-30-using-r-to-remove-audiobooks-from-spotify\n└── 2020-11-25-create-a-wordcloud-of-your-github-commits\nBecause distill’s building logic is much simpler3, this is not possible in distill as far as I understand: You either have to commit to slugs like 2020-11-26-git-commit-wordcloud-rstats or accept a folder structure like this:\n_posts\n├── automate-the-boring-stuff\n├── curl-vs-rcurl\n├── git-commit-wordcloud-rstats\n├── introducing-this-blog\n├── misc-distill-things\n├── oldrscripts-intro-to-r\n├── switching-to-gitlab\n└── using-r-to-remove-audiobooks-from-spotify\nThis is not ideal and makes me a bit unhappy but alas.. you can’t have simplicity and complex features at the same time. If I missed something obvious and this is possible after all, please shoot me a message on Twitter or via Email (see footer). I’d love to be wrong on this one!\nTheming and Customization\nThe docs on theming are quite good and I think there will be more and more websites implemented in distill so more examples will be available. I only changed the fonts and the colors and added some small css for the profile picture on my about page. You can check out the theme.css here.\nI also added a _footer.html which adds a footer with my social links. distill picks it up automatically so you don’t have to do anything besides dropping in some html into a file. 🎉\nEmojis\nMy blogdown theme supported automatic parsing of markdown emojis, so that :tada: would be rendered as 🎉 automatically. Sadly, this is not supported by distill, so I now have to use the emo package and/or copy directly from emojipedia if I want to have more control over which emoji is picked (some “names” resolve to multiple emojis in emo).\nEnd\nI’m quite happy with my new setup. Of course, there are still some things that could be improved: i’m still not sure about my font choices and there are still some old markdown-style emojis that I need to update. But all in all, I think distill is a great package that fills the void between GitHub pages and blogdown. I hope this collection of miscellaneous things helped some of you with your transition to distill. 😊. I see you next time with some real content, not just meta content. 😉\nUntil then: keep coding.❤️\n\nrecently saw a very funny meme about this but can’t find it anymore :(↩︎\nI won’t go into detail how distill works, for that I recommend the official documentation.↩︎\na good thing imo!↩︎\n",
    "preview": "posts/2020-12-12-tricks-blogdown-to-distill/blogdown_distill.png",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {},
    "preview_width": 517,
    "preview_height": 238
  },
  {
    "path": "posts/2020-07-31-building-a-blog-with-distill/",
    "title": "Building a blog with distill",
    "description": "I love simplicity.",
    "author": [
      {
        "name": "Thomas Mock",
        "url": "https://twitter.com/thomas_mock"
      }
    ],
    "date": "2020-08-01",
    "categories": [],
    "contents": "\n\nContents\ndistillWhy consider distill?Pros\nCons\n\n\nSteps to createStep 1: Install distill\nStep 2: New project from distill blog\nStep 3: Preview\nStep 4: _site.yml\nStep 5: Example blog post\nStep 6: New post\nStep 7: Add to Git\nStep 8: NetlifyOnce you’re logged in:\n\nStep 9: Blog post workflows\n\nNext StepsCustomize AppearanceExample changes\n\n\n\n\nNote: This post was originally written by Thomas Mock on the The Mockup blog - see the original post here\n\nModern buildingdistill\ndistill is “Scientific and technical writing, native to the web”. I’ve gotten lots of requests for creating a distill blog from scratch, so I’ve finally gotten around to building that!\nPlease note that the docs for distill are already excellent, check them out at: Distill: Creating a Blog. This guide is aimed more at the end-to-end process of creating your first blog.\nThe first blog is typically the hardest and I’ve lived through the uncertainty of not really understanding how all the pieces work together. I appreciate the simplicity of distill for this very reason - there’s less stuff to change. At its core distill is just writing articles for a website/blog!\nI also have owed this post to many people, namely Maëlle Salmon and JD Long as seen on my Twitter.\nWhy consider distill?\nPros\nNo Hugo dependency, no theme dependency, it’s a very stable format with the ability to customize just enough with a bit of effort. Think a self-hosted Medium.com in appearance. Very minimal, lightly themed, focused on writing and code! Again, I think that for someone getting started with creating websites or blogs it’s a very good starting point.\nWith distill you render/knit your articles locally, so you can quickly check your work without having to deploy to a git branch or to production. I do think that eventually it is a good idea to have git branches for previews or collaboration, but that’s a lot to ask for an initial first stab at a blog/site.\ndistill also natively supports citations, footnotes and asides, a rich auto-generated table of contents, support for HTMLwidgets and/or custom javascript, and a reader friendly typography that is mobile friendly/auto-adapts to mobile.\nAnother nicety is the ability to import a post with import_post(). This means you can take an existing blogpost from another website and import it into your new blog. This “does not require the original R Markdown document used to author the post—you only need access to the published HTML of a post to import it.”\nLastly, I am always amazed at the power of both blogdown and the more recent hugodown, but you are still relying on a changing version of Hugo and your theme over time. For a personal blog I personally prefer distill because I can get busy, neglect my blog for a year, come back to write a new post, and it still just works.\nCons\nHowever, blogdown and hugodown allow dramatically more customization. distill is truly an opinionated framework, and most of the easy customization you can do is fonts, colors, and the navbar. If you expect to create gorgeous custom-layout sites like education.rstudio.com or something like Desirée de Leon’s blog you’re likely going to be disappointed!\nAgain, for my blog I really just wanted a simple but in my opinion elegant minimalist theme, so I was fine with the tradeoff, as I would have built something similar with blogdown anyway!\nblogdown also supports other static site generators like Jekyll in place of Hugo, and a rich set of pre-built themes across the various generators. The structure of the site is extensible as well, so you can generate a site that truly looks like your own creation.\nLastly, note that you DO lose some niceties like hugo shortcodes for embedding, and again there is ONLY ONE THEME. Most appearance customization is done at the level of custom CSS.\nIf you’re still with me, here’s how to make it!\nSteps to create\nStep 1: Install distill\ninstall.packages(\"distill”)\nStep 2: New project from distill blog\nWhat this is really doing is running the following command, and generates the output below.\n\n> distill::create_blog(dir = \"demo-distill\", title = \"Demo Distill\")\nCreating website directory demo-distill\nCreating demo-distill/_site.yml\nCreating demo-distill/index.Rmd\nCreating demo-distill/about.Rmd\nCreating demo-distill/_posts/welcome/welcome.Rmd\n\nThis will create a home-directory titled whatever you passed for the dir argument above, so in our case “demo-distill”. This will contain the _site.yml, the about.rmd file, the index.rmd file, and two folders: _posts and _site. You should definitely change the dir and title arguments to whatever you want your site to be named, although you can edit this later with a bit of work.\nWhile you’re welcome to explore _site I consider it something you SHOULD NOT edit by hand and it will commonly get overridden by rebuilding posts or the whole site. _site is essentially where the built site lives as final HTML and other supporting files. The _posts folder on the other hand contains all the raw RMDs you will use to create posts.\nStep 3: Preview\nAt this point the website is technically built! You can “preview” the site by going to: _site -> index.html\nThe index.html is essentially the home page for your blog. You can navigate from there in either the RStudio viewer or send it to a web browser just like a normal webpage.\nNote: you can also use the Build Website button in RStudio to pull up the whole website. This will re-knit and build the entire site from scratch.\nPreview of the siteStep 4: _site.yml\nThe _site.yml is where you control the overall details about your blog such as the name, title, description, and the navbar. You can add new “tabs” by changing the _site.yml file, where the default has a navbar with the site name on the left and a “Home” and “About” Tab on the right.\n\nname: \"demo-distill\"\ntitle: \"Demo Distill\"\ndescription: |\n  Demo Distill\noutput_dir: \"_site\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article\n\nStep 5: Example blog post\nNavigate to _posts -> welcome -> welcome.rmd. This is the default “hello world” example that comes with you distill. Note you can delete that folder completely to drop it from the site, but let’s use it as a practice ground first.\nThis is still just a RMarkdown file, but it has a specific YAML header, that contains a title, a description, author, date, and outputs to distill::distill_article().\nTry adding some more text, code, or other content to this blog post and then knit it! It will generate and show the final output in the RStudio viewer.\n\n---\ntitle: \"Welcome to Demo Distill\"\ndescription: |\n  Welcome to our new blog, Demo Distill. We hope you enjoy\n  reading what we have to say!\nauthor:\n  - name: Nora Jones\n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\ndate: 07-27-2020\noutput:\n  distill::distill_article:\n    self_contained: false\n---\n\nStep 6: New post\nTo create a new post, you can run the following command: distill::create_post(\"title of post\")\nFull arguments seen below! I’ll call out two specific things.\ndraft argument: this prevents the post from being included in the site build until you turn it to FALSE. This is useful if you’re working on a blogpost over time, or want to come back to finish it later.\ndate_prefix: this adds a date like 2020-08-01-blog-post to the front of whatever your blog-post name is. This is useful as it also creates a folder structure that sorts properly, and prevents name clashes.\nWhenever you run the create_post() command it will generate a new folder and the basic RMarkdown doc to get started with the arguments you passed.\ncreate_post(\n  title, # mandatory\n  author = \"auto\",\n  slug = \"auto\", # generates a website slug (URL)\n  date_prefix = TRUE, # adds date for sorting\n  draft = FALSE,\n  edit = interactive()\n)\n\nNote that a nice overview of the Blog Post Workflow is covered at the distill site. This includes collaborating via Git Branches (or using them as previews). I push to my main branch all the time since I’m working solo.\nStep 7: Add to Git\nWe’re following instructions at: Chapter 17 Existing project, GitHub last | Happy Git and GitHub for the useR. If you’re a Git expert, feel free to use whatever method you like. From my experience setting up a few blogs this is the least painful if you’re NOT a Git expert.\n\nYou could also do the create GitHub and then connect it to RStudio route Chapter 17 Existing project, GitHub last | Happy Git and GitHub for the useR.\nNOTE: if you don’t have a GitHub PAT, get one now by following these instructions B GitHub Personal Access Tokens | Happy Git and GitHub for the useR.\nThis will first use Git locally, and then create a new GitHub repo based off your existing local files.\nRun the usethis::use_git() command, which will kick off some questions:\nDon’t commit just yet (Select 3: Not Now)\nRestart RStudio (Select 2: Yes)\nYou will know it all worked when you have the git logo at the top of RStudio\nGit logoClick on the Git logo and commit everything, notice we can’t push since we haven’t configured GitHub yet\nInitial commitusethis::use_github() — this works if you have already configured a GitHub Personal Access Token\nNext select https if you don’t have SSH keys\nSay 1: yup to the title and description\n\nExample of what your console commands are and their output seen below!\n\n> usethis::use_github()\n✓ Setting active project to '/Users/thomasmock/demo-distill-blog'\n✓ Checking that current branch is 'master'\nWhich git protocol to use? (enter 0 to exit)\n\n1: ssh   <-- presumes that you have set up ssh keys\n2: https <-- choose this if you don't have ssh keys (or don't know if you do)\n\nSelection: 2\n● Tip: To suppress this menu in future, put\n  `options(usethis.protocol = \"https\")`\n  in your script or in a user- or project-level startup file, '.Rprofile'.\n  Call `usethis::edit_r_profile()` to open it for editing.\n● Check title and description\n  Name:        demo-distill-blog\n  Description:\nAre title and description ok?\n\n1: Yup\n2: No way\n3: Negative\n\nSelection: 1\n✓ Creating GitHub repository\n✓ Setting remote 'origin' to 'https://github.com/jthomasmock/demo-distill-blog.git'\n✓ Pushing 'master' branch to GitHub and setting remote tracking branch\n✓ Opening URL 'https://github.com/jthomasmock/demo-distill-blog'\n\nOnce this is all run, it should open up a new webpage with your fancy new GitHub repo! Mine opened at: GitHub - jthomasmock/demo-distill-blog.\nStep 8: Netlify\nNow that we have our files on Github, we’re ready to deploy via Netlify!\nYou’ll need to Create an account at netlify if you don’t have one already.\nOnce you’re logged in:\nFirst click on import from Git\nNew site from GitClick on Configure netlify on GitHub, and follow their instructions to allow access, and then add the selected repository you want to send over (demo-distill-blog for me)\nClick Save!\n\nAdd specific repoClick on demo-distill-blog or whatever your blog’s name is!\nIMPORTANT\nMake sure to set the Publish Directory to _site (so Netlify can find the knitted HTML content)\nAnd then click deploy!\nMake sure to set publish directory to _siteYou’ll get a fun temporary name (mine was https://confident-meitner-e6e7dc.netlify.app/). You can change this with the Domain Settings to some-name.netlify.app or even purchase a custom domain like I did for example themockup.blog or what Sharla Gelfand did with sharla.party.\nNow your website should be up and running! If you don’t see a site (it 404s), then I would check to make sure you set the Publish Director to _site, otherwise it won’t know where to find the actual HTML content.\nStep 9: Blog post workflows\n\nWorkflow difference: Furthermore, website pages and root pages of blogs are re-rendered when the site is rebuilt but blog articles are not. Each blog article has to be rendered on its own, with intent. Why? Given that R package upgrades have a tendency to break older code, continuously re-rendering old posts is nearly impossible to do without errors, especially over longer periods of time.\n\nThis means you can “Build Site” frequently locally to check out how things work. This is personally the workflow I prefer vs having to commit the output to GitHub or a GitHub branch just to see the preview. You can also knit individual blog posts and they will adapt to your theme, so you can again test local changes whenever you’d like!\nTo get things into “production” once you have set up Netlify, you’ll just need to knit the new blog post, then commit and push to GitHub.\nYou can use command line git or the git integration in RStudio.\nExample of git in RStudioBasic idea is click commit and then push.\nExample of a commitNext Steps\nIf this guide didn’t provide enough detail, make sure to check out the Blog Post Workflow that goes into specific examples, like importing posts from elsewhere, changing URLs, updating old posts, etc.\nNow that you have a website running you can either leave it exactly as it is formatted, and just add new posts or you can do a little bit of customization to the “About Me”, Home page, etc.\nA lot of options are already covered at Distill for R Markdown: Creating a Blog\nA few notes:\nIf you want Twitter cards to show up with your images, you need to add a preview: some_img_name.png argument to the YAML header for each post.\nIf you define a custom domain you’ll need to change the base_url at the _site.yml file\nCustomize Appearance\nProbably of most interest to folks is customizing the appearance of the blog.\nIn general the strategy you should use is to inspect parts of the website for the class names and then you can apply CSS to change it\nA nice overview of the “Inspect” tool is covered here\nHTML/CSS classes and selectors are covered in the Mozilla docs here\nTo use a custom CSS file, you’ll need to change the output in _site.yml to include the below:\n\n\noutput:\n  distill::distill_article:\n    css: styles.css\n\n\n\nI keep my styles.css file at the same level as my _site.yml file.\nExample changes\nYou’ll need to store all of these in your styles.css file, and note that some of them depend on other changes - specifically to use custom fonts you ALSO have to import the custom fonts!\nBold silver title, pink background\n\n.distill-site-nav {\n  color: #C0C0C0;\n  background-color: #FF1493;\n  font-size: 20px;\n  font-weight: 900;\n}\n\nWant entire webpage to be “pink”?\nbody {\n  background-color: #FF1493;\n}\nChange hover color in nav bar\n.distill-site-nav a:hover {\n  color: #383838;\n}\nChange header font or color\n/* Change appearance of headers */\nh1, h2, h3, h4, h5 {\n  font-family: 'Fira Mono', sans-serif;\n  color: color: #383838;\n}\nImport custom fonts from Google\n/* Import fonts from Google's API */\n@import url('https://fonts.googleapis.com/css2?family=Lato');\n@import url('https://fonts.googleapis.com/css2?family=Fira+Mono');\nUse those fonts throughout\n/* Use specific font in the body of the text */\nhtml, body, p {\n\n  font-family: 'Lato', sans-serif;\n  font-weight: 200;\n  line-height: 1.3;\n  font-size: 1.0em;\n  color: #333333;\n  font-style: normal;\n\n}\nChange in-line code\n/* Change the appearance of in-line code chunks */\ncode {\n  font-family: 'Fira Mono', sans-serif;\n  color: #383838;\n  background: #F5F5F5;\n  font-weight: 400;\n  font-size: 0.9em;\n}\nChange code chunk colors\nd-code {\n  background: grey;\n}\n\n\n\n",
    "preview": "posts/2020-07-31-building-a-blog-with-distill/modern.jpeg",
    "last_modified": "2021-03-20T11:19:02+00:00",
    "input_file": {}
  }
]
