[
  {
    "path": "posts/making-a-darkmode-for-your-distill-site/",
    "title": "Making a Darkmode for your distill site",
    "description": "We build a darkmode for our distill site using css and a bit of java script.",
    "author": [
      {
        "name": "Jannik Buhr",
        "url": {}
      }
    ],
    "date": "2021-03-13",
    "categories": [],
    "contents": "\nJoin the Dark Side!\n‚Ä¶ we have cookies.\nFrom: knowyourmemeThere are many motivations to adding a dark mode to your site. I just like it, when things look consistent. So I also want my site to reflect that. But because at the same time I am also not very good at making things look consistent, which is why I mostly outsource design choices as much as I can. Here, for example, this means that I took the color values for the dark theme from the amazing nord color palette.\nBut let‚Äôs get into the practical side! How do we add a dark theme to complement our light theme to our distill site?\nAdding the button, css and java script\nFirst, we want a button that a user can click on to change the theme. I opted for the adjust button from Font Awesome. There is not much to do here, because those are already available in distill. Open up your _site.yml file and add an icon to the navbar:\nnavbar:\n  right:\n    - icon: fas fa-adjust\nWhile we are in this file, let‚Äôs also add the includes for the html file which will make the button work:\noutput:\n  distill::distill_article:\n    includes:\n      after_body: \"_after_body.html\"\n\nNote: I am omitting all the other things in our .yml file here and only show, what is being added. But I include the indentation-levels above the thing being added to show where to put it.\n\nThis is what _after_body.html looks like:\n<script>\nconst darkmodeToggle = document.getElementsByClassName(\"fas fa-adjust\")[0];\nlet theme = localStorage.getItem(\"theme\");\n\nif (!theme) {\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ) {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n}\nsetTheme();\n\nfunction switchTheme() {\n  if (theme === \"light\") {\n    theme = \"dark\";\n  } else {\n    theme = \"light\";\n  }\n  localStorage.setItem(\"theme\", theme);\n  setTheme();\n  console.log(theme);\n}\n\nfunction setTheme() {\n  if (theme === \"dark\") {\n    document.body.classList.add('darkmode');\n  } else {\n    document.body.classList.remove('darkmode');\n  }\n}\n\ndarkmodeToggle.addEventListener('click', switchTheme)\n<\/script>\nUnfortunately, the only way I found to refer to the darkmode toggle icon in the navbar was by class name. I could not find a way to give it an id from _site.yml. However, this should be fine because the navbar is usually the first thing on the page and the script refers to the first element of class fas fa-adjust that it can find. It is also important to have this script be included after the body, so that the rest of the site can load first before the script tries to find the button. Typically you would do this using a script file and sourcing it with the option defer, but sourcing a script file doesn‚Äôt work here due to the way distill changes file-path‚Äôs between top-level sites and posts. This is why the complete script is in the html here. The script adds a class .darkmode to the html body (and removes it when toggled off). This choice is first based on browser preferences and then saved to local storage.\nThe last thing to modify is our theme.css to make use of this .darkmode class. For each thing we want to change about our theme when it get‚Äôs dark, we take the corresponding class and the darkmode class and add our styling e.g.\n.darkmode d-article,\n.darkmode d-appendix,\n.darkmode body {\n  background-color: black;\n  color: white;\n}\nYou can have a look at my theme.css file for inspiration on what thing you need to change (though the css could be way cleaner): https://github.com/jmbuhr/jmbuhr.github.io/blob/master/theme.css\n\n\n\n  \n    \n      Share: ¬†\n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/making-a-darkmode-for-your-distill-site/images/cookies.png",
    "last_modified": "2021-03-14T19:37:25+00:00",
    "input_file": {},
    "preview_width": 350,
    "preview_height": 263
  },
  {
    "path": "posts/enable-utterances-with-distill/",
    "title": "Enable utterances with distill",
    "description": "Interested in giving your readers the ability to comment on your {distill} blog? Look no further than utteranc.es.",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2021-02-19",
    "categories": [
      "Blog Comments",
      "utterances"
    ],
    "contents": "\n\nContents\nAllow readers to comment on your blog posts\nAcknowledgements\nutterances\nHTML File in RStudio Project\nSomeone commented üéâ\n\n\n\n\n\n\nAllow readers to comment on your blog posts\nYou may be interested, like I was, in allowing reader comments for your {distill} blog posts.\nUpon researching the best way, I found that there was some negativity towards some comment platforms, and heard that utterances was a good alternative for now. Thanks go to Ma√´lle Salmon - during her session on blogging, for R-Ladies Johannesburg, she used utterances on her teaching site, and also taught us about it.\nAcknowledgements\nI‚Äôd like to make my acknowledgements up front, because this post is just a synthesis of two excellent posts from Ma√´lle Salmon and Miles McBain.\nGoodbye Disqus! Hello, Utterances\nHow I got utteranc.es working on my rmarkdown distill blog\nThis distill issue, was also a big help. Thanks to Taras Kaduk.\nReading their posts will give you the tools you need to have comments on your blog posts using utterances. The below is a summary from these resources.\nutterances\n‚Äúutterances is a comments widget built on GitHub issues‚Äù.\nTo set it up you need to first install the utterances GitHub app, if you have not already done so.\nYou then need to allow the app access to your blog repository (repo) in GitHub. My blog repo is named Blog_Vebash (inspired, eh ü§ê).\n\nIn GitHub, navigate to the Issues tab in your Blog‚Äôs repo, and open the Labels section as highlighted below.\n\nChoose New label to add a label for the issue that will serve as your blog‚Äôs comments. I added mine as:\n\n   comments üí¨\n \n\nHTML File in RStudio Project\nWe need to add an .html file that contains the information for the utterances app. Like Miles did, I named mine utterances.html.\nCreate an utterances.html file as shown below, with your blog repo details in the place of the one noted there. Here is mine, copied nearly directly from Mile‚Äôs.\n ```\n <script>\n   document.addEventListener(\"DOMContentLoaded\", function () {\n     if (!/posts/.test(location.pathname)) {\n       return;\n     }\n\n     var script = document.createElement(\"script\");\n     script.src = \"https://utteranc.es/client.js\";\n     script.setAttribute(\"repo\", \"sciencificity/Blog_Vebash\");\n     script.setAttribute(\"issue-term\", \"title\");\n     script.setAttribute(\"crossorigin\", \"anonymous\");\n     script.setAttribute(\"label\", \"comments üí¨\");\n     script.setAttribute(\"theme\", \"github-light\");\n\n     /* wait for article to load, append script to article element */\n     var observer = new MutationObserver(function (mutations, observer) {\n       var article = document.querySelector(\"d-article\");\n       if (article) {\n         observer.disconnect();\n         /* HACK: article scroll */\n         article.setAttribute(\"style\", \"overflow-y: hidden\");\n         article.appendChild(script);\n       }\n     });\n\n     observer.observe(document.body, { childList: true });\n   });\n <\/script>\n ```\n\nYou may also follow Taras Kaduk‚Äôs advice and amend the d-article, in the querySelector, to d-appendix, if you want your comments to appear after the appendix, instead of between the article and the appendix.\nPlace utterances.html in your main blog folder.\n\nIn your _site.yml file add the includes part under your output format YAML. Now comments using utterances is available for all your blog posts.\noutput: \n  distill::distill_article:\n    includes:\n      in_header: utterances.html\nSomeone commented üéâ\nTo comment a reader has to log into their GitHub account, and give the utterances app permission.\nWhen a reader comments it opens a comment issue in your Blog‚Äôs GitHub repo via the utterances-bot.\nYou may respond on your blog post directly, or in the GitHub repo‚Äôs Issues page.\nIf you do it on the Issues page, you may also close the issue there.\nAs Ma√´lle remarks the downside is perhaps that your reader needs a GitHub account. I am hopeful this will not be too big of a deterrent for readers. If it is, don‚Äôt hesitate to reach out on Twitter - I am interested to hear your opinion.\nHappy {distill} Blogging\nüï∫\n\n\n\n  \n    \n      Share: ¬†\n      \n        \n      \n      \n        \n      \n    \n  \n\n\n",
    "preview": "posts/enable-utterances-with-distill/preview2_small_.jpg",
    "last_modified": "2021-03-14T19:37:25+00:00",
    "input_file": {}
  }
]
